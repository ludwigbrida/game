#include <Engine/Components/Mesh.hpp>
#include <Engine/Graphics/Color.hpp>
#include <Engine/Maths/Vector3.hpp>

namespace ng {

Mesh Mesh::createTriangle(Float size) {
	auto radius = size / 2;

	return {
		.vertices{
			// vertex 1
			0,
			radius,
			0, // position
			0,
			0,
			1, // normal
			1,
			0,
			0, // color
			0.5,
			1, // texCoords

			// vertex 2
			-radius,
			-radius,
			0, // position
			0,
			0,
			1, // normal
			0,
			1,
			0, // color
			0,
			0, // texCoords

			// vertex 3
			radius,
			-radius,
			0, // position
			0,
			0,
			1, // normal
			0,
			0,
			1, // color
			1,
			0, // texCoords
		},
		.indices{0, 1, 2}};
}

Mesh Mesh::createCube(Float size) {
	const auto radius = size / 2;

	return {
		.vertices{
			// Left
			-radius,
			-radius,
			-radius,
			-1,
			0,
			0,
			1,
			0,
			0,
			0,
			0,
			-radius,
			radius,
			-radius,
			-1,
			0,
			0,
			1,
			0,
			0,
			0,
			1,
			-radius,
			-radius,
			radius,
			-1,
			0,
			0,
			1,
			0,
			0,
			0,
			0,
			-radius,
			radius,
			radius,
			-1,
			0,
			0,
			1,
			0,
			0,
			0,
			1,
			// Right
			radius,
			-radius,
			-radius,
			1,
			0,
			0,
			1,
			0,
			0,
			1,
			0,
			radius,
			radius,
			-radius,
			1,
			0,
			0,
			1,
			0,
			0,
			1,
			1,
			radius,
			-radius,
			radius,
			1,
			0,
			0,
			1,
			0,
			0,
			1,
			0,
			radius,
			radius,
			radius,
			1,
			0,
			0,
			1,
			0,
			0,
			1,
			1,
			// Bottom
			-radius,
			-radius,
			-radius,
			0,
			-1,
			0,
			0,
			1,
			0,
			0,
			0,
			radius,
			-radius,
			-radius,
			0,
			-1,
			0,
			0,
			1,
			0,
			1,
			0,
			-radius,
			-radius,
			radius,
			0,
			-1,
			0,
			0,
			1,
			0,
			0,
			0,
			radius,
			-radius,
			radius,
			0,
			-1,
			0,
			0,
			1,
			0,
			1,
			0,
			// Top
			-radius,
			radius,
			-radius,
			0,
			1,
			0,
			0,
			1,
			0,
			0,
			1,
			radius,
			radius,
			-radius,
			0,
			1,
			0,
			0,
			1,
			0,
			1,
			1,
			-radius,
			radius,
			radius,
			0,
			1,
			0,
			0,
			1,
			0,
			0,
			1,
			radius,
			radius,
			radius,
			0,
			1,
			0,
			0,
			1,
			0,
			1,
			1,
			// Rear
			-radius,
			-radius,
			-radius,
			0,
			0,
			-1,
			0,
			0,
			1,
			0,
			0,
			radius,
			-radius,
			-radius,
			0,
			0,
			-1,
			0,
			0,
			1,
			1,
			0,
			-radius,
			radius,
			-radius,
			0,
			0,
			-1,
			0,
			0,
			1,
			0,
			1,
			radius,
			radius,
			-radius,
			0,
			0,
			-1,
			0,
			0,
			1,
			1,
			1,
			// Front
			-radius,
			-radius,
			radius,
			0,
			0,
			1,
			0,
			0,
			1,
			0,
			0,
			radius,
			-radius,
			radius,
			0,
			0,
			1,
			0,
			0,
			1,
			1,
			0,
			-radius,
			radius,
			radius,
			0,
			0,
			1,
			0,
			0,
			1,
			0,
			1,
			radius,
			radius,
			radius,
			0,
			0,
			1,
			0,
			0,
			1,
			1,
			1,
		},
		.indices{
			// Left
			0,
			2,
			1,
			1,
			2,
			3,
			// Right
			4,
			5,
			6,
			6,
			5,
			7,
			// Bottom
			8,
			9,
			10,
			10,
			9,
			11,
			// Top
			12,
			14,
			13,
			13,
			14,
			15,
			// Rear
			16,
			18,
			17,
			17,
			18,
			19,
			// Front
			20,
			21,
			22,
			22,
			21,
			23,
		}};
}
}
